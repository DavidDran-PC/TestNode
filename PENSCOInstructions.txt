Installation

	Prerequisites:
		install git
		install angular 
		install node
		install mongo
		create a local mongo library called PENSCO_lib
		run mongodb
	Node
		1. clone repository
		2. npm install
			404 Not Found: event-stream@https://registry.npmjs.org/event-stream/-/event-stream-3.3.6.tgz
			if above error, remove package-lock and re-install.
		3. run gulp

	Angular:
		1. Clone repository
		2. npm install
		3. ng serve -o 
			opens on http://localhost:4202/

	
	API Operations:
		GET /accounts/ 
			Gets all stock purchases
				return JSON array of {
						_Id,  << String Unique Mongoose ID
						userID,	<< String UserId
						stockId, << String stock id (ticker number)
						purchaseAmount << String purchase amount in USD.
						datetime << String date time of purchase.
					}
		GET /accounts/?stockId=<stock id> << Stock Ticker ID  
			Gets all stock purchases that contain a stockId equal to the input stockId
				return JSON array of {
						_Id,  << String Unique Mongoose ID
						userID,	<< String UserId
						stockId, << String stock id (ticker number)
						purchaseAmount << String purchase amount in USD.
						datetime << String date time of purchase.
					}
		GET /accounts/<_Id> << Unique Mongoose ID 
			Gets a single stock purchase
				return JSON of {
						_Id,  << String Unique Mongoose ID
						userID,	<< String UserId
						stockId, << String stock id (ticker number)
						purchaseAmount << String purchase amount in USD.
						datetime << String date time of purchase.
					}
		POST /accounts/
			Posts (creates) a single stock purchase
				input JSON of {
						userID,	<< String UserId
						stockId, << String stock id (ticker number)
						purchaseAmount << String purchase amount in USD.
						datetime << String date time of purchase.
					}
				return JSON of {
						_Id,  << String Unique Mongoose ID (new ID)
						userID,	<< String UserId
						stockId, << String stock id (ticker number)
						purchaseAmount << String purchase amount in USD.
						datetime << String date time of purchase.
					}
		PUT /accounts/<_Id> << Unique Mongoose ID 
			Puts (changes) a single stock purchase
				input JSON of {
						_Id,  << String Unique Mongoose ID optional (ignored)
						userID,	<< String UserId
						stockId, << String stock id (ticker number)
						purchaseAmount << String purchase amount in USD.
						datetime << String date time of purchase.
					}
				return JSON of {
						_Id,  << String Unique Mongoose ID (from query string)
						userID,	<< String UserId
						stockId, << String stock id (ticker number)
						purchaseAmount << String purchase amount in USD.
						datetime << String date time of purchase.
					}
		PATCH /accounts
			PATCH (changes an individul field of) a single stock purchase
				input JSON of {
						_Id,  << String Unique Mongoose ID (ignored)
						userID,	<< String UserId (optional)
						stockId, << String stock id (ticker number) (optional)
						purchaseAmount << String purchase amount in USD. (optional)
						datetime << String date time of purchase. (optional)
					}
				return JSON of {
						_Id,  << String Unique Mongoose ID
						userID,	<< String UserId
						stockId, << String stock id (ticker number)
						purchaseAmount << String purchase amount in USD.
						datetime << String date time of purchase.
					}
		DELETE /accounts
			deletes a single stock purchase
				return JSON of "{\"message\":\"deleted it\"}"
----------------------------------------------------------------------------------

Assumed out of scope (overall): 
		Security and certificates. 
		Roles. 
		Persistent logging. 
		Any applicable SEC regulations.
		"Extensive" testing

	UI:
		In scope: 
			Page to add a stock purchase using a stock ticker symbol and a purchase amount.
			Asyncronously submit data to API to create purchase
			Visual feedback on success or error.
		Assumed out of scope:
			Animations, Styling, ADA compliance :)
		Included:
			List of purchases.
			Full CRUD opperations.
			Datetime of purchase.
			UserId of purchaser. (may or may not be the person performing the purchase).
	Server:
		In Scope:
			Create a stock purchase.
			Retrieve a purchase based on unique identifier.
			Retrieve a List of all purchases.
			Retrieve a list of all purchases for a particular stock ticker id. (assumed all users).
		Assumed out of scope:
			Validation of userid, Limiting of purchase amount.

